
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  debug;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
	ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;
	
	# sample upstream block:
    upstream app.com {
        server 127.0.0.1:5000;
        server 127.0.0.1:8055;
		server 127.0.0.1:8060;
		server 127.0.0.1:8070;
    }
	

    # the size depends on the number of servers in upstream {}:
    lua_shared_dict healthcheck 1m;

    lua_socket_log_errors off;
	
	lua_shared_dict log_dict 10M;

    
	init_worker_by_lua_block {
        local hc = require "resty.upstream.healthcheck"

        local ok, err = hc.spawn_checker{
            shm = "healthcheck",  -- definisano od "lua_shared_dict"
            upstream = "app.com", -- definisano od "upstream"
            type = "http", -- podržava "http" i "https"

            http_req = "GET / HTTP/1.0\r\nHost: app.com\r\n\r\n",
            -- HTTP zahtjev za provjeru

            interval = 2000,  -- pokreće ciklus provjere svake 2 sekunde
            timeout = 1000,   -- 1 sekunda je vremensko ograničenje za mrežne operacije
            fall = 4,  -- # uzastopnih neuspjeha prije nego što se odbije servis
            rise = 2,  -- # uzastopnih uspjeha prije nego što se ponovno odobri servis
            valid_statuses = {200, 302},  -- spisak važećih HTTP statusnih kodova
            concurrency = 10,  -- nivo konkurentnosti za zahtjeve za testiranje
        }
        if not ok then
            ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
            return
        end
    }
	
	# hold loaded certs in cache
	lua_shared_dict cert_cache  30m;

	# used by ngx.shcache
	lua_shared_dict locks 5M;

    server {
        listen       80;
        server_name  localhost;
		
		listen 443 ssl;
		ssl_certificate     /cert/certifikat.crt;
		ssl_certificate_key /cert/certifikat.key;
		ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
		ssl_ciphers         HIGH:!aNULL:!MD5;
		keepalive_timeout   70;
		
		ssl_certificate_by_lua_file "lualib/resty/certs_main.lua";
		
        location / {
			#cors setup
			if ($request_method = 'OPTIONS') {
			add_header 'Access-Control-Allow-Origin' '*';
			add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
			#
			# Custom headers and headers various browsers *should* be OK with but aren't
			#
			add_header 'Access-Control-Allow-Headers' '*';
			#
			# Tell client that this pre-flight info is valid for 20 days
			#
			add_header 'Access-Control-Max-Age' 1728000;
			add_header 'Content-Type' 'text/plain; charset=utf-8';
			add_header 'Content-Length' 0;
			return 204;
			}
			 if ($request_method = 'POST') {
				add_header 'Access-Control-Allow-Origin' '*' always;
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
				add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
				add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
			 }
			 if ($request_method = 'GET') {
				add_header 'Access-Control-Allow-Origin' '*' always;
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
				add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
				add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
			 }
            root   html;
            index  index.html index.htm;
        }
		
		location /terms_of_use.html {
			#cors setup
			add_header 'Access-Control-Allow-Headers' '*';
			if ($request_method = 'OPTIONS') {
			add_header 'Access-Control-Allow-Origin' '*';
			add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
			#
			# Custom headers and headers various browsers *should* be OK with but aren't
			#
			add_header 'Access-Control-Allow-Headers' '*';
			#
			# Tell client that this pre-flight info is valid for 20 days
			#
			add_header 'Access-Control-Max-Age' 1728000;
			add_header 'Content-Type' 'text/plain; charset=utf-8';
			add_header 'Content-Length' 0;
			return 204;
			}
			 if ($request_method = 'POST') {
				add_header 'Access-Control-Allow-Origin' '*' always;
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
				add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
				add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
			 }
			 if ($request_method = 'GET') {
				add_header 'Access-Control-Allow-Origin' '*' always;
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
				add_header 'Access-Control-Allow-Headers' '*' always;
				add_header 'Access-Control-Expose-Headers' '*' always;
			 }
			 root   html;
            index  terms_of_use.html;

        }
		
		location = /batch {
			default_type application/json;
			content_by_lua_block {
				ngx.req.read_body()

				-- pročitaj json tijelo zahtjeva
				local cjson = require "cjson"
				local batch = cjson.decode(ngx.req.get_body_data())

				-- kreiraj tabelu za svaki od zahtjeva
				local requests = {}
				for j, item2 in ipairs(batch) do
					for i, item in ipairs(item2["batch"]) do
						table.insert(requests, {item.relative_url, { method = ngx.HTTP_GET}})
					end
				 
				end

				-- izvrši batch zahtjeve paralelno
				local results = {}
				local resps = { ngx.location.capture_multi(requests) }
				
				for i, res in ipairs(resps) do
					-- vrati status i tijelo zahtjeva
					table.insert(results, {status = res.status, body = cjson.decode(res.body)})
				end

				ngx.say(cjson.encode({results = results}))
			} 
			access_by_lua_block {
			
				-- provjera da li je klijent blacklistan
				if ngx.var.remote_addr == "132.5.72.3" then
					ngx.exit(ngx.HTTP_FORBIDDEN)
				end

				-- provjera da li uri sadrži nedozvoljene stringove - 
				if ngx.var.uri and string.match(ngx.var.request_uri, "suicide")
				then
					return ngx.redirect("/terms_of_use.html")
				end
				
				if ngx.var.uri and string.match(ngx.var.request_uri, "@")
				then
					return ngx.redirect("/terms_of_use.html")
				end

				-- tests passed
				
				-- provjera jwt tokena
				local jwt = require "resty.jwt"
				local validators = require "resty.jwt-validators"
				local json = require('cjson')
				
				-- ukoliko je zahtjev tipa OPTIONS nije potrebna autorizacija
				-- za login endpoint nije potrebna autorizacija
				if ngx.var.request_method ~= "OPTIONS" and not string.match(ngx.var.uri, "sign") then
					
					-- dohvati jwt token iz auth zaglavlja
					local jwtToken = ngx.var.http_Authorization
					if jwtToken == nil then
						ngx.status = ngx.HTTP_UNAUTHORIZED
						ngx.header.content_type = "application/json; charset=utf-8"
						ngx.say("{\"error\": \"Forbidden\"}")
						ngx.exit(ngx.HTTP_UNAUTHORIZED)
					end
					local claim_spec = {
						-- provjeri da li je token istekao
						exp = validators.opt_is_not_expired(),
						-- provjeri scope
						scope = function(val) return string.match("^billing_credit_card$", val) end,
					}
					
					-- provjeri jwt token
					local jwt_obj = jwt:verify('qHO^4L09T2P*1doggRz^k#yHQMFmgfYS', jwtToken, claim_spec)
					
					-- jwt token nije ispravan - unauthorized
					if not jwt_obj["verified"] then
						ngx.status = ngx.HTTP_UNAUTHORIZED
						ngx.header.content_type = "application/json; charset=utf-8"
						ngx.say("{\"error\": \"INVALID_JWT\"}")
						ngx.exit(ngx.HTTP_UNAUTHORIZED)
					end
				end
				
			}
			rewrite_by_lua_block {
				-- funkcija za html sanitizaciju
				function htmlescape(text)
					local special = { ['<']='&lt;', ['>']='&gt;', ['&']='&amp;', ['"']='&quot;' }
					return text:gsub('[<>&"]', special)
				end
				
				local new_args = ""
				local m, err = nil
				-- učitaj uri parametre
				local args = ngx.req.get_uri_args()

				-- iteriraj kroz argumente
				for key, val in pairs(args) do
					new_args = new_args .. "&" .. key .. "=" .. htmlescape(val)
				end

				-- idi na novi uri
				ngx.req.set_uri_args(new_args)
				 
			}
			log_by_lua_block {
				
				local log_dict = ngx.shared.log_dict
				-- dohvati upstream vrijeme odgovora
				local upstream_time = tonumber(ngx.var.upstream_response_time)
				
				-- dohvati trenutno vrijeme
				local vrijeme = os.date('%Y-%m-%d %H:%M:%S')
				
				-- spasi log zahtjeva
				log_dict:set("request_time", (log_dict:get("request_time") or "") .. "Request uri: " .. ngx.var.request_uri .. "  Execution time: " .. tostring(upstream_time) .. "  Timestamp: " .. vrijeme .. "<br/>")
				
				-- suma svih zahtjeva
				local sum = log_dict:get("upstream_time-sum") or 0
				sum = sum + upstream_time
				log_dict:set("upstream_time-sum", sum)

				-- spasi vrijeme izvršavanja svih zahtjeva
				local newval, err = log_dict:incr("upstream_time-nb", 1)
				if not newval and err == "not found" then
					log_dict:add("upstream_time-nb", 0)
					log_dict:incr("upstream_time-nb", 1)
				end
			}
		}
		
		location = /inventory_billing {
			#cors setup
			add_header 'Access-Control-Allow-Headers' '*';
			if ($request_method = 'OPTIONS') {
			add_header 'Access-Control-Allow-Origin' '*';
			add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
			#
			# Custom headers and headers various browsers *should* be OK with but aren't
			#
			add_header 'Access-Control-Allow-Headers' '*';
			#
			# Tell client that this pre-flight info is valid for 20 days
			#
			add_header 'Access-Control-Max-Age' 1728000;
			add_header 'Content-Type' 'text/plain; charset=utf-8';
			add_header 'Content-Length' 0;
			return 204;
			}
			 if ($request_method = 'POST') {
				add_header 'Access-Control-Allow-Origin' '*' always;
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
				add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
				add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
			 }
			 if ($request_method = 'GET') {
				add_header 'Access-Control-Allow-Origin' '*' always;
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
				add_header 'Access-Control-Allow-Headers' '*' always;
				add_header 'Access-Control-Expose-Headers' '*' always;
			 }
			default_type application/json;
			content_by_lua_block {
				ngx.req.read_body()

				-- dohvati id iz zahtjeva
				local cjson = require "cjson"
				local id = ngx.req.get_uri_args()["id"]

				-- kreiraj tabelu za svaki od zahtjeva
				local requests = {}
				table.insert(requests, {"/billing/getPaymentOptions/" .. id, { method = ngx.HTTP_GET}})
				table.insert(requests, {"/inventory/getById/" .. id, { method = ngx.HTTP_GET}})

				-- izvrši batch zahtjeve paralelno
				local results = {}
				local resps = { ngx.location.capture_multi(requests) }
				
				for i, res in ipairs(resps) do
					-- vrati status i tijelo zahtjeva
					table.insert(results, {status = res.status, body = cjson.decode(res.body)})
				end

				ngx.say(cjson.encode({results = results}))
			} 
			access_by_lua_block {
			
				-- provjera da li je klijent blacklistan
				if ngx.var.remote_addr == "132.5.72.3" then
					ngx.exit(ngx.HTTP_FORBIDDEN)
				end

				-- provjera da li uri sadrži nedozvoljene stringove - 
				if ngx.var.uri and string.match(ngx.var.request_uri, "suicide")
				then
					return ngx.redirect("/terms_of_use.html")
				end
				
				if ngx.var.uri and string.match(ngx.var.request_uri, "@")
				then
					return ngx.redirect("/terms_of_use.html")
				end

				-- tests passed
				
				-- provjera jwt tokena
				local jwt = require "resty.jwt"
				local validators = require "resty.jwt-validators"
				local json = require('cjson')
				
				-- ukoliko je zahtjev tipa OPTIONS nije potrebna autorizacija
				-- za login endpoint nije potrebna autorizacija
				if ngx.var.request_method ~= "OPTIONS" and not string.match(ngx.var.uri, "sign") then
					
					-- dohvati jwt token iz auth zaglavlja
					local jwtToken = ngx.var.http_Authorization
					if jwtToken == nil then
						ngx.status = ngx.HTTP_UNAUTHORIZED
						ngx.header.content_type = "application/json; charset=utf-8"
						ngx.say("{\"error\": \"Forbidden\"}")
						ngx.exit(ngx.HTTP_UNAUTHORIZED)
					end
					local claim_spec = {
						-- provjeri da li je token istekao
						exp = validators.opt_is_not_expired(),
						-- provjeri scope
						scope = function(val) return string.match("^billing_credit_card$", val) end,
					}
					
					-- provjeri jwt token
					local jwt_obj = jwt:verify('qHO^4L09T2P*1doggRz^k#yHQMFmgfYS', jwtToken, claim_spec)
					
					-- jwt token nije ispravan - unauthorized
					if not jwt_obj["verified"] then
						ngx.status = ngx.HTTP_UNAUTHORIZED
						ngx.header.content_type = "application/json; charset=utf-8"
						ngx.say("{\"error\": \"INVALID_JWT\"}")
						ngx.exit(ngx.HTTP_UNAUTHORIZED)
					end
				end
				
			}
			rewrite_by_lua_block {
				-- funkcija za html sanitizaciju
				function htmlescape(text)
					local special = { ['<']='&lt;', ['>']='&gt;', ['&']='&amp;', ['"']='&quot;' }
					return text:gsub('[<>&"]', special)
				end
				
				local new_args = ""
				local m, err = nil
				-- učitaj uri parametre
				local args = ngx.req.get_uri_args()

				-- iteriraj kroz argumente
				for key, val in pairs(args) do
					new_args = new_args .. "&" .. key .. "=" .. htmlescape(val)
				end

				-- idi na novi uri
				ngx.req.set_uri_args(new_args)
				 
			}
			log_by_lua_block {
				
				local log_dict = ngx.shared.log_dict
				-- dohvati upstream vrijeme odgovora
				local upstream_time = tonumber(ngx.var.upstream_response_time)
				
				-- dohvati trenutno vrijeme
				local vrijeme = os.date('%Y-%m-%d %H:%M:%S')
				
				-- spasi log zahtjeva
				log_dict:set("request_time", (log_dict:get("request_time") or "") .. "Request uri: " .. ngx.var.request_uri .. "  Execution time: " .. tostring(upstream_time) .. "  Timestamp: " .. vrijeme .. "<br/>")
				
				-- suma svih zahtjeva
				local sum = log_dict:get("upstream_time-sum") or 0
				sum = sum + upstream_time
				log_dict:set("upstream_time-sum", sum)

				-- spasi vrijeme izvršavanja svih zahtjeva
				local newval, err = log_dict:incr("upstream_time-nb", 1)
				if not newval and err == "not found" then
					log_dict:add("upstream_time-nb", 0)
					log_dict:incr("upstream_time-nb", 1)
				end
			}
		}
		
		location = /login {
			#cors setup
			if ($request_method = 'OPTIONS') {
			add_header 'Access-Control-Allow-Origin' '*';
			add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
			#
			# Custom headers and headers various browsers *should* be OK with but aren't
			#
			add_header 'Access-Control-Allow-Headers' '*';
			#
			# Tell client that this pre-flight info is valid for 20 days
			#
			add_header 'Access-Control-Max-Age' 1728000;
			add_header 'Content-Type' 'text/plain; charset=utf-8';
			add_header 'Content-Length' 0;
			return 204;
			}
			 if ($request_method = 'POST') {
				add_header 'Access-Control-Allow-Origin' '*' always;
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
				add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
				add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
			 }
			 if ($request_method = 'GET') {
				add_header 'Access-Control-Allow-Origin' '*' always;
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
				add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
				add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
			 }
            content_by_lua_block {
				-- GET zahtjev nije dozvoljen za ovaj endpoint
				if request_method == "GET" then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
					ngx.header.content_type = "application/json; charset=utf-8"
					ngx.say("{\"error\": \"Forbidden\"}")
					ngx.exit(ngx.HTTP_UNAUTHORIZED)
				end
				ngx.req.read_body()
					
				-- pročitaj kredencijale iz zahtjeva
                local username = ngx.req.get_post_args()["username"] or 0
				local password = ngx.req.get_post_args()["password"] or 0
				
				if username == "hbojadzic1@etf.unsa.ba" and password == "12345" then
					local cjson = require "cjson"
					local jwt = require "resty.jwt"
					
					-- kreiraj i potpiši jwt token
					local jwt_token = jwt:sign(
						"qHO^4L09T2P*1doggRz^k#yHQMFmgfYS",
						{
							header={typ="JWT", alg="HS256"},
							payload={
									scope="billing_credit_card",
									exp = ngx.time() + 12000 }
						}
					)
					ngx.say(jwt_token)
					return
				end
				
				-- neuspješna autentikacija
				ngx.status = ngx.HTTP_UNAUTHORIZED
				ngx.header.content_type = "application/json; charset=utf-8"
				ngx.say("{\"error\": \"Forbidden\"}")
				ngx.exit(ngx.HTTP_UNAUTHORIZED)
            }
        }
		
		location = /health {
            access_log off;
            allow 127.0.0.1;
            deny all;

            default_type text/plain;
            content_by_lua_block {
                local hc = require "resty.upstream.healthcheck"
                ngx.say("Nginx Worker PID: ", ngx.worker.pid())
                ngx.print(hc.status_page())
            }
        }
		
		location = /metrics {
            access_log off;
            default_type text/plain;
            content_by_lua_block {
                local hc = require "resty.upstream.healthcheck"
                st , err = hc.prometheus_status_page()
                if not st then
                    ngx.say(err)
                    return
                end
                ngx.print(st)
            }
        }
		
		location /metric_logs{
			access_log off;
            allow 127.0.0.1;
            deny all;
			
			default_type text/html;			
			content_by_lua_block {
				local log_dict = ngx.shared.log_dict
				local sum = log_dict:get("upstream_time-sum")
				local nb = log_dict:get("upstream_time-nb")
				local request_time = log_dict:get("request_time")

				if nb and sum then
					ngx.say('<h3>Request monitoring</h3><p>Average upstream response time: ' .. sum / nb .. ' </br>Number of requests: ' .. nb .. ' requsts</p>' .. '<p> Request times:</br>' .. request_time .. '</p>')
				else
					ngx.say("No data yet.")
				end
			}
		}
		
		
		location /chat {
			#cors setup
			if ($request_method = 'OPTIONS') {
			add_header 'Access-Control-Allow-Origin' '*';
			add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
			#
			# Custom headers and headers various browsers *should* be OK with but aren't
			#
			add_header 'Access-Control-Allow-Headers' '*';
			#
			# Tell client that this pre-flight info is valid for 20 days
			#
			add_header 'Access-Control-Max-Age' 1728000;
			add_header 'Content-Type' 'text/plain; charset=utf-8';
			add_header 'Content-Length' 0;
			return 204;
			}
			 if ($request_method = 'POST') {
				add_header 'Access-Control-Allow-Origin' '*' always;
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
				add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
				add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
			 }
			 if ($request_method = 'GET') {
				add_header 'Access-Control-Allow-Origin' '*' always;
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
				add_header 'Access-Control-Allow-Headers' '*' always;
				add_header 'Access-Control-Expose-Headers' '*' always;
			 }
			access_by_lua_block {
			
				-- provjera da li je klijent blacklistan
				if ngx.var.remote_addr == "132.5.72.3" then
					ngx.exit(ngx.HTTP_FORBIDDEN)
				end

				-- provjera da li uri sadrži nedozvoljene stringove - 
				if ngx.var.uri and string.match(ngx.var.request_uri, "suicide")
				then
					return ngx.redirect("/terms_of_use.html")
				end
				
				if ngx.var.uri and string.match(ngx.var.request_uri, "@")
				then
					return ngx.redirect("/terms_of_use.html")
				end

				-- tests passed
			}
			rewrite_by_lua_block {
				-- funkcija za html sanitizaciju
				function htmlescape(text)
					local special = { ['<']='&lt;', ['>']='&gt;', ['&']='&amp;', ['"']='&quot;' }
					return text:gsub('[<>&"]', special)
				end
				
				local new_args = ""
				local m, err = nil
				-- učitaj uri parametre
				local args = ngx.req.get_uri_args()

				-- iteriraj kroz argumente
				for key, val in pairs(args) do
					new_args = new_args .. "&" .. key .. "=" .. htmlescape(val)
				end

				-- idi na novi uri
				ngx.req.set_uri_args(new_args)
				 
			}
			log_by_lua_block {
				
				local log_dict = ngx.shared.log_dict
				-- dohvati upstream vrijeme odgovora
				local upstream_time = tonumber(ngx.var.upstream_response_time)
				
				-- dohvati trenutno vrijeme
				local vrijeme = os.date('%Y-%m-%d %H:%M:%S')
				
				-- spasi log zahtjeva
				log_dict:set("request_time", (log_dict:get("request_time") or "") .. "Request uri: " .. ngx.var.request_uri .. "  Execution time: " .. tostring(upstream_time) .. "  Timestamp: " .. vrijeme .. "<br/>")
				
				-- suma svih zahtjeva
				local sum = log_dict:get("upstream_time-sum") or 0
				sum = sum + upstream_time
				log_dict:set("upstream_time-sum", sum)

				-- spasi vrijeme izvršavanja svih zahtjeva
				local newval, err = log_dict:incr("upstream_time-nb", 1)
				if not newval and err == "not found" then
					log_dict:add("upstream_time-nb", 0)
					log_dict:incr("upstream_time-nb", 1)
				end
			}
			proxy_pass http://127.0.0.1:5000;
        }
		
		
		location /inventory {
			#cors setup
			if ($request_method = 'OPTIONS') {
			add_header 'Access-Control-Allow-Origin' '*';
			add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
			#
			# Custom headers and headers various browsers *should* be OK with but aren't
			#
			add_header 'Access-Control-Allow-Headers' '*';
			#
			# Tell client that this pre-flight info is valid for 20 days
			#
			add_header 'Access-Control-Max-Age' 1728000;
			add_header 'Content-Type' 'text/plain; charset=utf-8';
			add_header 'Content-Length' 0;
			return 204;
			}
			 if ($request_method = 'POST') {
				add_header 'Access-Control-Allow-Origin' '*' always;
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
				add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
				add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
			 }
			 if ($request_method = 'GET') {
				add_header 'Access-Control-Allow-Origin' '*' always;
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
				add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
				add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
			 }
			resolver 8.8.8.8;
            set $target '127.0.0.1:8055';
			access_by_lua_block {
			
				-- provjera da li je klijent blacklistan
				if ngx.var.remote_addr == "132.5.72.3" then
					ngx.exit(ngx.HTTP_FORBIDDEN)
				end

				-- provjera da li uri sadrži nedozvoljene stringove - 
				if ngx.var.uri and string.match(ngx.var.request_uri, "suicide")
				then
					return ngx.redirect("/terms_of_use.html")
				end
				
				if ngx.var.uri and string.match(ngx.var.request_uri, "@")
				then
					return ngx.redirect("/terms_of_use.html")
				end

				-- tests passed
				
				-- provjera jwt tokena
				local jwt = require "resty.jwt"
				local validators = require "resty.jwt-validators"
				local json = require('cjson')
				
				-- ukoliko je zahtjev tipa OPTIONS nije potrebna autorizacija
				-- za login endpoint nije potrebna autorizacija
				if ngx.var.request_method ~= "OPTIONS" and not string.match(ngx.var.uri, "sign") then
					
					-- dohvati jwt token iz auth zaglavlja
					local jwtToken = ngx.var.http_Authorization
					if jwtToken == nil then
						ngx.status = ngx.HTTP_UNAUTHORIZED
						ngx.header.content_type = "application/json; charset=utf-8"
						ngx.say("{\"error\": \"Forbidden\"}")
						ngx.exit(ngx.HTTP_UNAUTHORIZED)
					end
					local claim_spec = {
						-- provjeri da li je token istekao
						exp = validators.opt_is_not_expired(),
						-- provjeri scope
						scope = function(val) return string.match("^billing_credit_card$", val) end,
					}
					
					-- provjeri jwt token
					local jwt_obj = jwt:verify('qHO^4L09T2P*1doggRz^k#yHQMFmgfYS', jwtToken, claim_spec)
					
					-- jwt token nije ispravan - unauthorized
					if not jwt_obj["verified"] then
						ngx.status = ngx.HTTP_UNAUTHORIZED
						ngx.header.content_type = "application/json; charset=utf-8"
						ngx.say("{\"error\": \"INVALID_JWT\"}")
						ngx.exit(ngx.HTTP_UNAUTHORIZED)
					end
				end
				
				-- dohvati User_agent zaglavlje
                local key = ngx.var.http_user_agent
				-- funkcija match koja podržava OR
				local function MatchAny( str, pattern_list )
					for _, pattern in ipairs( pattern_list ) do
						local w = string.match( str, pattern )
						if w then return w end
					end
				end
			
				-- ukoliko zahtjev dolazi iz mobilne aplikacije rutirati ka mobilnoj
				-- u suprotnom rutirati ka web aplikaciji
				if MatchAny(key, {"Android", "webOS", "iPhone", "iPad", "iPod", "BlackBerry", "IEMobile", "Opera Mini"}) then
					ngx.var.target = "127.0.0.1:8060"
				else 
					ngx.var.target = "127.0.0.1:8055" 
				
				end
				
			}
			rewrite_by_lua_block {
				-- funkcija za html sanitizaciju
				function htmlescape(text)
					local special = { ['<']='&lt;', ['>']='&gt;', ['&']='&amp;', ['"']='&quot;' }
					return text:gsub('[<>&"]', special)
				end
				
				local new_args = ""
				local m, err = nil
				-- učitaj uri parametre
				local args = ngx.req.get_uri_args()

				-- iteriraj kroz argumente
				for key, val in pairs(args) do
					new_args = new_args .. "&" .. key .. "=" .. htmlescape(val)
				end
				 
				-- idi na novi uri
				ngx.req.set_uri_args(new_args)
				 
			}
			log_by_lua_block {
				
				local log_dict = ngx.shared.log_dict
				-- dohvati upstream vrijeme odgovora
				local upstream_time = tonumber(ngx.var.upstream_response_time)
				
				-- dohvati trenutno vrijeme
				local vrijeme = os.date('%Y-%m-%d %H:%M:%S')
				
				-- spasi log zahtjeva
				log_dict:set("request_time", (log_dict:get("request_time") or "") .. "Request uri: " .. ngx.var.request_uri .. "  Execution time: " .. tostring(upstream_time) .. "  Timestamp: " .. vrijeme .. "<br/>")
				
				-- suma svih zahtjeva
				local sum = log_dict:get("upstream_time-sum") or 0
				sum = sum + upstream_time
				log_dict:set("upstream_time-sum", sum)

				-- spasi vrijeme izvršavanja svih zahtjeva
				local newval, err = log_dict:incr("upstream_time-nb", 1)
				if not newval and err == "not found" then
					log_dict:add("upstream_time-nb", 0)
					log_dict:incr("upstream_time-nb", 1)
				end
			}
            proxy_pass http://$target;

        }
		
		
		location /billing {
			access_by_lua_block {
			
				-- provjera da li je klijent blacklistan
				if ngx.var.remote_addr == "132.5.72.3" then
					ngx.exit(ngx.HTTP_FORBIDDEN)
				end

				-- provjera da li uri sadrži nedozvoljene stringove - 
				if ngx.var.uri and string.match(ngx.var.request_uri, "suicide")
				then
					return ngx.redirect("/terms_of_use.html")
				end
				
				if ngx.var.uri and string.match(ngx.var.request_uri, "@")
				then
					return ngx.redirect("/terms_of_use.html")
				end

				-- tests passed
				
				-- provjera jwt tokena
				local jwt = require "resty.jwt"
				local validators = require "resty.jwt-validators"
				local json = require('cjson')
				
				-- ukoliko je zahtjev tipa OPTIONS nije potrebna autorizacija
				-- za login endpoint nije potrebna autorizacija
				if ngx.var.request_method ~= "OPTIONS" and not string.match(ngx.var.uri, "sign") then
					
					-- dohvati jwt token iz auth zaglavlja
					local jwtToken = ngx.var.http_Authorization
					if jwtToken == nil then
						ngx.status = ngx.HTTP_UNAUTHORIZED
						ngx.header.content_type = "application/json; charset=utf-8"
						ngx.say("{\"error\": \"Forbidden\"}")
						ngx.exit(ngx.HTTP_UNAUTHORIZED)
					end
					local claim_spec = {
						-- provjeri da li je token istekao
						exp = validators.opt_is_not_expired(),
						-- provjeri scope
						scope = function(val) return string.match("^billing_credit_card$", val) end,
					}
					
					-- provjeri jwt token
					local jwt_obj = jwt:verify('qHO^4L09T2P*1doggRz^k#yHQMFmgfYS', jwtToken, claim_spec)
					
					-- jwt token nije ispravan - unauthorized
					if not jwt_obj["verified"] then
						ngx.status = ngx.HTTP_UNAUTHORIZED
						ngx.header.content_type = "application/json; charset=utf-8"
						ngx.say("{\"error\": \"INVALID_JWT\"}")
						ngx.exit(ngx.HTTP_UNAUTHORIZED)
					end
				end
				
			}
			rewrite_by_lua_block {
				-- funkcija za html sanitizaciju
				function htmlescape(text)
					local special = { ['<']='&lt;', ['>']='&gt;', ['&']='&amp;', ['"']='&quot;' }
					return text:gsub('[<>&"]', special)
				end
				
				local new_args = ""
				local m, err = nil
				-- učitaj uri parametre
				local args = ngx.req.get_uri_args()

				-- iteriraj kroz argumente
				for key, val in pairs(args) do
					new_args = new_args .. "&" .. key .. "=" .. htmlescape(val)
				end

				-- idi na novi uri
				ngx.req.set_uri_args(new_args)
				 
			}
			log_by_lua_block {
				
				local log_dict = ngx.shared.log_dict
				-- dohvati upstream vrijeme odgovora
				local upstream_time = tonumber(ngx.var.upstream_response_time)
				
				-- dohvati trenutno vrijeme
				local vrijeme = os.date('%Y-%m-%d %H:%M:%S')
				
				-- spasi log zahtjeva
				log_dict:set("request_time", (log_dict:get("request_time") or "") .. "Request uri: " .. ngx.var.request_uri .. "  Execution time: " .. tostring(upstream_time) .. "  Timestamp: " .. vrijeme .. "<br/>")
				
				-- suma svih zahtjeva
				local sum = log_dict:get("upstream_time-sum") or 0
				sum = sum + upstream_time
				log_dict:set("upstream_time-sum", sum)

				-- spasi vrijeme izvršavanja svih zahtjeva
				local newval, err = log_dict:incr("upstream_time-nb", 1)
				if not newval and err == "not found" then
					log_dict:add("upstream_time-nb", 0)
					log_dict:incr("upstream_time-nb", 1)
				end
			}
            proxy_pass http://127.0.0.1:8070;
        }
		
		location /news {
			#cors setup
			if ($request_method = 'OPTIONS') {
			add_header 'Access-Control-Allow-Origin' '*';
			add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
			#
			# Custom headers and headers various browsers *should* be OK with but aren't
			#
			add_header 'Access-Control-Allow-Headers' '*';
			#
			# Tell client that this pre-flight info is valid for 20 days
			#
			add_header 'Access-Control-Max-Age' 1728000;
			add_header 'Content-Type' 'text/plain; charset=utf-8';
			add_header 'Content-Length' 0;
			return 204;
			}
			 if ($request_method = 'POST') {
				add_header 'Access-Control-Allow-Origin' '*' always;
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
				add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
				add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
			 }
			 if ($request_method = 'GET') {
				add_header 'Access-Control-Allow-Origin' '*' always;
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
				add_header 'Access-Control-Allow-Headers' '*' always;
				add_header 'Access-Control-Expose-Headers' '*' always;
			 }
			header_filter_by_lua_block {
				ngx.header.content_length = nil
				ngx.header.content_type = {'application/json'}
			}
			body_filter_by_lua_block {
				local xml2json = {}


				function dump(o)
				   if type(o) == 'table' then
					  local s = '{ '
					  for k,v in pairs(o) do
						 if type(k) ~= 'number' then k = '"'..k..'"' end
						 s = s .. '['..k..'] = ' .. dump(v) .. ','
					  end
					  return s .. '} '
				   else
					  return tostring(o)
				   end
				end

				function table.map_length(t)
					local c = 0
					for k,v in pairs(t) do
						 c = c+1
					end
					return c
				end

				local function parseargs(s)
				  local arg = {}
				  string.gsub(s, "([%-%w]+)=([\"'])(.-)%2", function (w, _, a)
					arg[w] = a
				  end)
				  return arg
				end

				function xml2json(s)
				  local stack = {}
				  local top = {}
				  table.insert(stack, top)
				  local ni,c,label,xarg, empty
				  local i, j = 1, 1
				  while true do
					ni,j,c,label,xarg, empty = string.find(s, "<(%/?)([%w:]+)(.-)(%/?)>", i)
					if not ni then break end
					local text = string.sub(s, i, ni-1)
					if not string.find(text, "^%s*$") then
					  top[label] =  text
					end
					if empty == "/" then  -- empty element tag
					  local key = ""
					  for k,v in pairs(top) do key = k; break end
					  top[key][label] = ""
					elseif c == "" then   -- start tag
						top = { [label] = "" }
						table.insert(stack, top)
					else  -- end tag
					   local toclose = table.remove(stack)
					   top = stack[#stack]
					  if #stack < 1 then
						error("nothing to close with "..label)
					  end
					  local key = ""
					  for k,v in pairs(toclose) do key = k; break end

					  if key ~= label then
						error("trying to close "..key.." with "..label)
					  end

					  key = ""
					  for k,v in pairs(top) do key = k; break end
					  if top[key] == nil or (top[key] and top[key] == "") then
						top[key] = toclose
					  else -- append
						for k,v in pairs(toclose) do
						  top[key][k] = v
						end
					  end
					end
					i = j+1
				  end

					return stack[1]
				  --for k,v in pairs(stack[1]) do
					--return v
				  --end
				end
				
			  local output = xml2json(ngx.arg[1])
			  local cjson = require 'cjson'
			  ngx.arg[1] = cjson.encode(output)
			}

            proxy_pass https://news-api-hanna.herokuapp.com/news;
        }
		

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
        
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
